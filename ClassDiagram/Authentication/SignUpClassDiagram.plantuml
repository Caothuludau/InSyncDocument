@startuml SignUpClassDiagram
skinparam classAttributeIconSize 0
skinparam linetype ortho
Title Sign Up Class Diagram
'Character	Visibility
'-			private
'#			protected
'~			package private
'+			public

'Extension	<|--	Quan hệ mở rộng từ (là extends hoặc implements nhưng ko có annotations trong code)
'Composition	*--	 Quan hệ gắn kết chặt chẽ : part - of
'Aggregation	o--	Quan hệ liên kết giữa hai thực thể : use, has

' Include các file vào trong file để sử dụng'

package pkgSignUp <<Frame>> {  
    'include controller'
    !includesub ../ControllersClassDiagram.plantuml!UsersController
    !includesub ../ControllersClassDiagram.plantuml!ControllerBase

    
    'include Repository'
    !includesub ../RepositoriesClassDiagram.plantuml!IRepositoryBase
    !includesub ../RepositoriesClassDiagram.plantuml!RepositoryBase
    !includesub ../RepositoriesClassDiagram.plantuml!DbContext
    !includesub ../RepositoriesClassDiagram.plantuml!InSyncContext
    !includesub ../RepositoriesClassDiagram.plantuml!IUserRepository
    !includesub ../RepositoriesClassDiagram.plantuml!UserRepository
    'include Dto'
    !includesub ../DtosClassDiagram.plantuml!ActionUserResponse
    !includesub ../DtosClassDiagram.plantuml!CreateUserDto
    !includesub ../DtosClassDiagram.plantuml!Verification
    !includesub ../DtosClassDiagram.plantuml!EmailAddresses
     !includesub ../DtosClassDiagram.plantuml!Data
    !includesub ../ModelsClassDiagram.plantuml!User

    ' Lớp chính xử lý sign-in, sign-out và sign-up
    class ClerkSignUp {
    + signUpWithEmail(email: string, password: string): UserClerk
    + signUpWithOAuth(provider: SocialProvider): OAuthSession
    + verifyUser(user: UserClerk): boolean
    + callWebhook(user: CreateUserDto): WebhookResponse
    }

    ' Quá trình xác thực OAuth
    class OAuthSession {
    + id: string
    + provider: SocialProvider
    + authUrl: string
    + status: OAuthStatus
    + authCode: string
    + redirectToProvider(): void
    + receiveAuthCode(authCode: string): boolean
    }

    ' Các trạng thái OAuth
    class OAuthStatus {
    <<enumeration>>
    + PENDING
    + COMPLETED
    + FAILED
    }

    ' Các nhà cung cấp OAuth
    class SocialProvider {
    <<enumeration>>
    + Google
    + Facebook
    + GitHub
    + Apple
    }

    ' Thông tin người dùng
    class UserClerk {
    + id: string
    + email: string
    + fullName: string
    + isVerified: boolean
    }

    ' Kết quả webhook
    class WebhookResponse {
    + status: string
    + message: string
    + timestamp: Date
    }

    ' Lớp Google OAuth xử lý mã xác thực
    class GoogleOAuth {
    + exchangeAuthCode(authCode: string): AccessToken
    + getUserInfo(accessToken: AccessToken): GoogleUserInfo
    }

    ' Thông tin AccessToken
    class AccessToken {
    + token: string
    + expiresIn: Int
    + scope: string
    }

    ' Thông tin Google User
    class GoogleUserInfo {
    + id: string
    + email: string
    + fullName: string
    + profilePicture: string
    }



    'set up realation ship' 
    ControllerBase <|-- UsersController
    UsersController ..> ActionUserResponse : return views
    UsersController ..> CreateUserDto : request

    IRepositoryBase <|.. RepositoryBase
    IUserRepository <|.. UserRepository
    UserRepository o-- User

    IRepositoryBase <|-- IUserRepository 
    RepositoryBase <|-- UserRepository

    DbContext <|--InSyncContext
    RepositoryBase o-- InSyncContext
    UsersController o-- IUserRepository

    'Relationships
    Data "1" --> "*" EmailAddresses
    EmailAddresses "1" --> "1" Verification
    CreateUserDto "1" --> "1" Data



    ClerkSignUp --> OAuthSession
    OAuthSession --> OAuthStatus
    OAuthSession --> SocialProvider
    ClerkSignUp --> UserClerk
    ClerkSignUp --> WebhookResponse
    GoogleOAuth --> AccessToken
    GoogleOAuth --> GoogleUserInfo
    ClerkSignUp --> UsersController : webhook

}