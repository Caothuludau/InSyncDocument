@startuml
skinparam classAttributeIconSize 0

' User class represents a user with their attributes and methods for password reset
class User {
  + id: String
  + email: String
  + fullName: String
  + password: String
  + resetCode: String
  + resetCodeExpiration: Date
  + updatePassword(newPassword: String): Boolean
  + verifyResetCode(code: String): Boolean
  + isResetCodeExpired(): Boolean
}

' Class to manage the reset password request process
class ResetPasswordRequest {
  + email: String
  + sendResetCode(): String
  + validateEmail(): Boolean
}

' Class for the reset password code with a validation method
class ResetPasswordCode {
  + code: String
  + expirationDate: Date
  + generateCode(): String
  + isValid(code: String): Boolean
  + isExpired(): Boolean
}

' Email service class to send reset code to user
class EmailService {
  + sendResetCodeToUser(user: User, code: String): void
}

' Password reset process handler
class PasswordResetProcess {
  + initiateResetRequest(email: String): String
  + verifyResetCode(user: User, code: String): Boolean
  + resetPassword(user: User, newPassword: String): Boolean
}

' Password reset flow controller
class PasswordResetFlow {
  + startPasswordReset(): void
  + enterResetCode(code: String): Boolean
  + validateResetCode(code: String): Boolean
  + enterNewPassword(newPassword: String): Boolean
}

' Relationships
User --> ResetPasswordRequest : "Requests reset code"
ResetPasswordRequest --> ResetPasswordCode : "Generates reset code"
ResetPasswordRequest --> EmailService : "Sends reset code to user's email"
ResetPasswordCode --> User : "Stores the reset code for validation"
PasswordResetProcess --> ResetPasswordRequest : "Handles reset request"
PasswordResetProcess --> ResetPasswordCode : "Verifies the reset code"
PasswordResetProcess --> EmailService : "Sends the code to email"
PasswordResetProcess --> User : "Updates user's password"
PasswordResetFlow --> PasswordResetProcess : "Controls reset process flow"
PasswordResetFlow --> User : "Interacts with user for input"
@enduml
' Bước 1: Yêu cầu reset mật khẩu
' Người dùng nhấn nút Reset Password.
' Hệ thống gọi PasswordResetFlow.startPasswordReset(), qua đó gọi đến ResetPasswordRequest để tạo mã xác thực.
' ResetPasswordRequest gọi đến ResetPasswordCode.generateCode() để tạo mã reset 6 chữ số.
' Mã xác thực được gửi qua email thông qua EmailService.sendResetCodeToUser().
' Bước 2: Người dùng nhập mã xác thực
' Người dùng nhận mã xác thực qua email và nhập vào ô nhập liệu.
' PasswordResetFlow.enterResetCode(code) được gọi để người dùng nhập mã.
' Hệ thống kiểm tra mã xác thực qua ResetPasswordCode.isValid(code).
' Nếu mã hợp lệ, người dùng được chuyển đến màn hình nhập mật khẩu mới.
' Nếu mã sai, hệ thống không cho phép tiếp tục và thông báo lỗi.
' Bước 3: Cập nhật mật khẩu mới
' Sau khi mã xác thực hợp lệ, người dùng nhập mật khẩu mới.
' PasswordResetFlow.enterNewPassword(newPassword) gọi đến PasswordResetProcess.resetPassword(user, newPassword) để cập nhật mật khẩu mới cho người dùng.
' Bước 4: Kết thúc quá trình reset mật khẩu
' Mật khẩu mới được lưu lại trong hệ thống của người dùng.
' Nếu mọi bước thực hiện thành công, hệ thống sẽ hoàn tất quá trình reset mật khẩu và người dùng có thể đăng nhập với mật khẩu mới.