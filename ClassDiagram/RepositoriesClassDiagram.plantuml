@startuml Repositorys
skinparam classAttributeIconSize 0
skinparam linetype ortho
Title Repository Class Diagram

'Character	Visibility
'-			private
'#			protected
'~			package private
'+			public

'Extension	<|--	Quan hệ mở rộng từ (là extends hoặc implements nhưng ko có annotations trong code)
'Composition	*--	 Quan hệ gắn kết chặt chẽ : part - of
'Aggregation	o--	Quan hệ liên kết giữa hai thực thể : use, has
'Association	||	Quan hệ liên kết giữa hai thực thể : use, has, contains
'Inheritance	<|--	Quan hệ mở rộng từ (là extends hoặc implements nhưng
'ko có annotations trong code)'


package pkgRepositorys <<Frame>>{
!startsub DbContext
abstract DbContext <<abstract>> {
}
!endsub

!startsub InSyncContext
class InSyncContext <<context>> {
    + Assets : DbSet<Asset>
    + CategoryDocuments : DbSet<CategoryDocument>
    + CustomerReviews : DbSet<CustomerReview>
    + Documents : DbSet<Document>
    + Pages : DbSet<Page>
    + Projects : DbSet<Project>
    + Scenarios : DbSet<Scenario>
    + SubscriptionPlans : DbSet<SubscriptionPlan>
    + Users : DbSet<User>
    + UserSubscriptions : DbSet<UserSubscription>
}
!endsub

    
!startsub IRepositoryBase
interface IRepositoryBase<T> <<irepository>> {
    + Add(entity: T)
    + Update(entity: T)
    + Delete(entity: T)
    + GetSingleByCondition(...)
    + GetAll(...)
}
!endsub

!startsub RepositoryBase

class RepositoryBase<T>  <<repository>>  {
    # _context : InSyncContext
    - disposed : bool
}
!endsub



!startsub IAssetRepository
interface IAssetRepository <<irepository>>   {
    // Inherits from IRepositoryBase<Asset>
}
!endsub
 
!startsub AssetRepository

class AssetRepository <<repository>>   {
    - _context : InSyncContext
    + AssetRepository(context : InSyncContext)
    // Inherits from RepositoryBase<Asset>
}

!endsub


!startsub ICategoryDocumentRepository
interface ICategoryDocumentRepository <<irepository>>   {
    + DeleteCategoryDocument(id : Guid) : Task
    // Inherits from IRepositoryBase<CategoryDocument>
}
!endsub

!startsub CategoryDocumentRepository
class CategoryDocumentRepository <<repository>>   {
    - _context : InSyncContext
    + CategoryDocumentRepository(context : InSyncContext)
    + DeleteCategoryDocument(id : Guid) : Task
    // Inherits from RepositoryBase<CategoryDocument>
}
!endsub


!startsub ICustomerReviewRepository
interface ICustomerReviewRepository <<irepository>>   {
    // Inherits from IRepositoryBase<CustomerReview>
}
!endsub

!startsub CustomerReviewRepository
class CustomerReviewRepository  <<repository>>  {
    - _context : InSyncContext
    + CustomerReviewRepository(context : InSyncContext)
    // Inherits from RepositoryBase<CustomerReview>
}
!endsub


!startsub IDocumentRepository
interface IDocumentRepository  <<irepository>>  {
    // Inherits from IRepositoryBase<Document>
}
!endsub

!startsub DocumentRepository
class DocumentRepository <<repository>>   {
    - _context : InSyncContext
    + DocumentRepository(context : InSyncContext)
    // Inherits from RepositoryBase<Document>
}
!endsub


!startsub IPageRepository
interface IPageRepository <<irepository>>   {
    // Inherits from IRepositoryBase<Page>
}
!endsub

!startsub PageRepository
class PageRepository  <<repository>>  {
    - _context : InSyncContext
    + PageRepository(context : InSyncContext)
    // Inherits from RepositoryBase<Page>
}
!endsub


!startsub IProjectRepository
interface IProjectRepository  <<irepository>>  {
    + DeleteProject(id : Guid) : Task
    // Inherits from IRepositoryBase<Project>
}
!endsub

!startsub ProjectRepository
class ProjectRepository <<repository>>   {
    - _context : InSyncContext
    + ProjectRepository(context : InSyncContext)
    + DeleteProject(id : Guid) : Task
    // Inherits from RepositoryBase<Project>
}
!endsub


!startsub IScenarioRepository
interface IScenarioRepository  <<irepository>>  {
    // Inherits from IRepositoryBase<Scenario>
}
!endsub

!startsub ScenarioRepository
class ScenarioRepository  <<irepository>>  {
    - _context : InSyncContext
    + ScenarioRepository(context : InSyncContext)
    // Inherits from RepositoryBase<Scenario>
}
!endsub



!startsub ISubscriptionPlanRepository
interface ISubscriptionPlanRepository <<irepository>>   {
    + DeleteSubscriptionPlan(id : Guid) : Task
    // Inherits from IRepositoryBase<SubscriptionPlan>
}
!endsub

!startsub SubscriptionPlanRepository
class SubscriptionPlanRepository  <<repository>>  {
    - _context : InSyncContext
    + SubscriptionPlanRepository(context : InSyncContext)
    + DeleteSubscriptionPlan(id : Guid) : Task
    // Inherits from RepositoryBase<SubscriptionPlan>
}
!endsub

!startsub IUserRepository
interface IUserRepository  <<irepository>>  {
    // Inherits from IRepositoryBase<User>
}
!endsub

!startsub UserRepository
class UserRepository  <<repository>>  {
    - _context : InSyncContext
    + UserRepository(context : InSyncContext)
    // Inherits from RepositoryBase<User>
}
!endsub


!startsub IUserSubscriptionRepository
interface IUserSubscriptionRepository  <<irepository>>  {
    // Inherits from IRepositoryBase<UserSubscription>
}
!endsub

!startsub UserSubscriptionRepository
class UserSubscriptionRepository  <<repository>>  {
    - _context : InSyncContext
    + UserRepository(context : InSyncContext)
    // Inherits from RepositoryBase<UserSubscription>
}
!endsub
}
@enduml
