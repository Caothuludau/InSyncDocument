@startuml Controllers
skinparam classAttributeIconSize 0
skinparam linetype ortho
Title Controller Class Diagram
'Character	Visibility
'-			private
'#			protected
'~			package private
'+			public

'Extension	<|--	Quan hệ mở rộng từ (là extends hoặc implements nhưng ko có annotations trong code)
'Composition	*--	 Quan hệ gắn kết chặt chẽ : part - of
'Aggregation	o--	Quan hệ liên kết giữa hai thực thể : use, has

' Include các file vào trong file để sử dụng'

package pkgControllers <<Frame>> {   

    !startsub ControllerBase
    abstract ControllerBase <<controller>> {}
    !endsub
    'User Controller'
    !startsub UsersController
    class UsersController  <<controller>>  {
        - _userRepo : IUserRepository

        + CreateUser(userDto : CreateUserDto)
        + UpdateUser(userDto : UpdateUserDto)
    }
    !endsub
    
  
    'Assets Controller'
    !startsub AssetsController
    
    class AssetsController  <<controller>>  {
        - _assestRepo : IAssetRepository
        - _projectRepo : IProjectRepository
        - ITEM_PAGES_DEFAULT : int
        - INDEX_DEFAULT : int
        
        + GetAssets() 
        + GetAllAsset(index : int,
        size : int,
        keySearch : string) 
        + GetAllAssetOfProject(idProject : Guid, 
        index : int, 
        size : int, 
        keySearch : string) 
        + GetAssetById(id : Guid) 
        + AddAsset(newAsset : AddAssetDto) 
        + UpdateAsset(id : Guid, 
        updateAsset : UpdateAssetDto) 
        + DeleteAsset(id : Guid) 
    }
    !endsub

    !startsub CategoryDocumentsController
    class CategoryDocumentsController  <<controller>>  {
        - _cateRepo : ICategoryDocumentRepository
        
        + GetCategoryDocuments() 
        + GetAllCategoryDocument(index : int, 
        size : int, keySearch : string) 
        + GetCategoryDocumentById(id : Guid) 
        + AddCategoryDocument(newCate : AddCategoryDocumentDto) 
        + UpdateCategoryDocument(id : Guid, 
        updateCate : UpdateCategoryDocumentDto) 
        + DeleteCategoryDocument(id : Guid) 
    }
    !endsub

    !startsub CustomerReviewsController
    class CustomerReviewsController  <<controller>>  {
        - _customerReviewRepo : ICustomerReviewRepository

        + GetCustomerReviews() 
        + GetAllCustomerReview(index : int, size : int, 
        keySearch : string) 
        + GetAllCustomerReviewIsPublish(index : int, size : int, 
        isPublish : bool, keySearch : string ) 
        + GetCustomerReviewById(id : Guid) 
        + AddCustomerReview(newReview : AddCustomerReviewDto) 
        + UpdateCustomerReview(id : Guid, 
        updateReview : UpdateCustomerReviewDto) 
        + DeleteCustomerReview(id : Guid) 
    }
    !endsub

    !startsub DocumentsController
    class DocumentsController  <<controller>>  {
        - _documentRepo : IDocumentRepository
        - _cateRepo : ICategoryDocumentRepository

        + GetDocuments() 
        + GetAllDocumentWithPaging(index : int, size : int, 
        keySearch : string ) 
        + GetAllDocumentCategory(index : int, size : int, 
        categoryId : Guid, keySearch : string ) 
        + GetDocumentById(id : Guid) 
        + GetDocumentBySlug(slug : string) 
        + AddDocument(newDocument : AddDocumentDto) 
        + UpdateDocument(id : Guid, 
        updateDocument : UpdateDocumentDto) 
        + UpdateDocumentBySlug(slug : string, 
        updateDocument : UpdateDocumentDto) 
        + DeleteDocument(id : Guid) 
    }
    !endsub
   
   !startsub PagesController
    class PagesController  <<controller>>  {
        - _pageRepo :IPageRepository 
        
        + GetPages() 
        + GetAllPage(index : int, size : int, 
        keySearch : string ) 
        + GetPageById(id : Guid) 
        + GetPageBySlug(slug : string) 
        + AddPage(newPage : AddPageDto) 
        + UpdatePage(id : Guid, 
        updatePage : UpdatePageDto) 
        + UpdatePageBySlug(slug : string, 
        updatePage : UpdatePageDto) 
        + DeletePage(id : Guid) 
    }
    !endsub

    !startsub ProjectsController
    class ProjectsController <<controller>>   {
        - _projectRepo : IProjectRepository
        - _userRepo : IUserRepository

        + GetProjects() 
        + GetAllProject(index : int, size : int, keySearch : string ) 
        + GetAllProjectIsPublishOfUser(userId : Guid, index : int, size : int, 
        isPublish : bool, keySearch : string ) 
        + GetAllProjectIsPublishByUserIdClerk(userIdClerk : string, 
        isPublish : bool, index : int, size : int, keySearch : string ) 
        + GetProjectById(id : Guid) 
        + AddProject(newProject : AddProjectDto) 
        + AddProjectUserClerk(newProject : AddProjectClerkDto) 
        + UpdateProject(id : Guid, updateProject : UpdateProjectDto) 
        + DeleteProject(id : Guid) 
    }
    !endsub

    !startsub ScenariosController
    class ScenariosController  <<controller>>  {
        - _scenarioRepo : IScenarioRepository
        - _projectRepo : IProjectRepository
        - _userRepo : IUserRepository

        + GetScenarios() 
        + GetAllScenarios(index : int, size : int, keySearch : string ) 
        + GetScenarioById(id : Guid) 
        + GetScenarioOfProject(projectId : Guid, createdBy : Guid, index : int, size : int, keySearch : string ) 
        + GetScenarioOfProjectByUserClerk(projectId : Guid, userIdClerk : string, index : int, size : int, keySearch : string ) 
        + GetAllScenarioByUserIdClerk(userIdClerk : string, index : int, size : int, keySearch : string) 
        + GetAllScenarioByUserId(userId : Guid, keySearch : string, index : int, size : int) 
        + AddScenario(newScenario : AddScenarioDto) 
        + AddScenarioByUserClerk(newScenario : AddScenarioUserClerkDto) 
        + UpdateScenario(id : Guid, updateScenario : UpdateScenarioDto) 
        + ToggleFavoriteScenario(id : Guid) 
        + UpdateWebJsonScenario(id : Guid, webjson : string) 
        + UpdateAndroidJsonScenario(id : Guid, androidjson : string) 
        + RenameScenario(id : Guid ,renameScenario : UpdateRenameScenarioDto )  
        + DeleteScenario(id : Guid ) 
    }
    !endsub

    !startsub SubscriptionPlansController
    class SubscriptionPlansController  <<controller>>  {
        - _subscriptionPlanRepo : ISubscriptionPlanRepository
        - _userRepository : IUserRepository

        + GetSubscriptionPlans() 
        + GetAllSubsciptionPlan(index : int, size : int, keySearch : string) 
        + GetSubsciptionPlanById(id : Guid) 
        + AddSubsciptionPlan(newSubscription : AddSubscriptionPlanDto) 
        + AddSubsciptionPlanUserClerk(newSubscription : AddSubscriptionPlanUserClerkDto) 
        + UpdateSubscriptionPlan(id : Guid, 
        updateSubsciption : UpdateSubscriptionPlanDto) 
        + DeleteSubsciptionPlan(id : Guid) 
    }
    !endsub


    !startsub UserSubscriptionsController
    class UserSubscriptionsController <<controller>>   {
        - _userSubRepo : IUserSubscriptionRepository
        - _userRepo : IUserRepository
        - _subRepo : ISubscriptionPlanRepository
        - _webhookSecretCheckoutSessionSucceeded : string ;
        - _webhookSecretInvoicePaymentSucceeded  : string ;
        - _webhookSecretCustomerSubsciptionDeleted : string ;
        
        - includes : string[]
        + UserSubscriptionsController(userSubRepo  : IUserSubscriptionRepository,
           userRepo : IUserRepository ,subRepo : ISubscriptionPlanRepository ,
        IMapper mapper, logger : ILogger<UserSubscriptionsController>)
        + GetUserSubscriptions() 
        + GetAllUserSubscription(index : int, size : int) 
        + GetAllUserSubsciptionOfUser(userId : Guid, index : int, size : int) 
        + GetAllUserSubsciptionOfUserClerk(userIdClerk : string, index : int, size : int) 
        + GetUserSubsciptionOfUserNoExpired(userId : Guid) 
        + GetUserSubsciptionOfUserClerkNoExpired(userIdClerk : string) 
        + CheckUserSubsciptionOfUserClerkNonExpired(userIdClerk : string) 
        + GetAllUserSubsciptionOfSubsciption(subId : Guid, index : int, size : int) 
        + GetUserSubsciptionById(id : Guid) 
        + AddUserSubsciption(newUserSub : AddUserSubsciptionDto) 
        + AddUserSubsciptionUserClerk(newUserSub : AddUserSubsciptionUserClerkDto) 
        + UpdateUserSubsciption(Id : Guid, updateUserSub : UpdateUserSubsciptionDto) 
        + DeleteUserSubsciption(Id : Guid) 
        + HandleStripeEventCheckoutCompleted()  
        + HandleStripeEventInvoicePayment()  
        + HandleStripeEventCustomerSubsciptionDeleted()  
    }
!endsub
    !startsub   AdminAuthorizationAttribute
    class AdminAuthorizationAttribute {
        - string _requiredRole = "admin"
        + OnAuthorizationAsync(context: AuthorizationFilterContext): Task
    }
    !endsub
}