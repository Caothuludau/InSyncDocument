@startuml ShowQRCode
skinparam classAttributeIconSize 0
skinparam linetype ortho

skinparam BackgroundColor #ffffff
skinparam class {
    BackgroundColor #c6f8ff
    BorderColor #000000
}

skinparam package {
    BackgroundColor #ffffff
    BorderColor #000000
}

package pkgShowQRCode <<Frame>>{

        class QRCodeDisplayView {
            + displayQRCode(): void
        }

        class QRCodeDisplayController {
            - matchId: int
            - qrCodeData: String
            + fetchQRCode(): void
        }
    


        class PassengerJourneyController {
            + getMatchQrCode(matchId: int): ResponseEntity<ResponseWrapper<QRCodeResponseDto>>
        }
    

        class PassengerMatchService {
            + getMatchQrCode(matchId: int): QRCodeResponse
        }

        class JourneyMatchRepository {
            + findById(matchId: int): Optional<JourneyMatch>
        }
    
        class QRCodeResponseDto {
            - imageData: String
            - qrCodeText: String
        }

        class ResponseWrapper<T> {
            - responseCode: int
            - message: String
            - data: T
        }
   
        class JourneyMatch {
            - matchId: long
            - user: User
            - matchStatus: String
            - matchDepartureTime: DateTime
            - passengerExpectedArrivalTime: DateTime
            - driverExpectedArrivalTime: DateTime
            - matchPrice: double
            - driverJourney: DriverJourney
            - passengerJourney: PassengerJourney
        }

        class User {
            - userId: long
            - name: String
            - phoneNumber: String
            - password: String
            - profilePicture: byte[]
            - isActive: boolean
            - isLocked: boolean
            - createdDate: LocalDateTime
            - tokenVersion: long
            + addJourney(journey: Journey): void
            + removeJourney(journey: Journey): void
        }
    

    QRCodeDisplayView --> QRCodeDisplayController
    QRCodeDisplayController --> PassengerJourneyController
    PassengerJourneyController --> PassengerMatchService
    PassengerMatchService --> JourneyMatchRepository
    PassengerMatchService --> QRCodeResponseDto
    PassengerJourneyController --> ResponseWrapper
    PassengerMatchService --> QRCodeResponse
    JourneyMatchRepository --> JourneyMatch
    JourneyMatch --> DriverJourney
    JourneyMatch --> PassengerJourney
    DriverJourney --> User
    PassengerJourney --> User

}

@enduml