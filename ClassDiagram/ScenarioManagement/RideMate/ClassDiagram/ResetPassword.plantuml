@startuml ResetPassword
skinparam classAttributeIconSize 0
skinparam linetype ortho

skinparam BackgroundColor #ffffff
skinparam class {
    BackgroundColor #c6f8ff
    BorderColor #000000
}

skinparam package {
    BackgroundColor #ffffff
    BorderColor #000000
}

package pkgResetPassword <<Frame>>{

        class ResetPasswordView {
            - phoneNumberInputController: TextEditingController
            - codeInputController: TextEditingController
            - newPasswordController: TextEditingController
            - confirmPasswordController: TextEditingController
            - errorPhoneNumber: RxString
            - errorCode: RxString
            - errorPassword: RxString
            - phoneNumber: RxString
            - code: RxString
            - newPassword: RxString
            - confirmPassword: RxString
            - passwordVisible: RxBool
            + buildView(context: BuildContext): Widget
        }

        class ResetPasswordController {
            - phoneNumberInputController: TextEditingController
            - codeInputController: TextEditingController
            - newPasswordController: TextEditingController
            - confirmPasswordController: TextEditingController
            - errorPhoneNumber: RxString
            - errorCode: RxString
            - errorPassword: RxString
            - phoneNumber: RxString
            - code: RxString
            - newPassword: RxString
            - confirmPassword: RxString
            - passwordVisible: RxBool
            + resetPassword(): void
        }
    


        class UserController {
            + changePasswordNoToken(phoneNumber: String, code: String, passwordChangeRequestDto: PasswordChangeRequestDto): ResponseEntity<ResponseWrapper<UserProfileResponseDto>>
        }
    

        class UserService {
            + changePasswordUserNoToken(phoneNumber: String, passwordChangeRequestDto: PasswordChangeRequestDto): User
        }

        class UserRepository {
            + findByPhoneNumber(phoneNumber: String): Optional<User>
            + save(user: User): User
        }

        class JwtService {
            + getUserFromSecurityContext(): User
        }
    

        class PasswordChangeRequestDto {
            - newPassword: String
        }

        class UserProfileResponseDto {
            - userId: long
            - name: String
            - phoneNumber: String
            - profilePicture: byte[]
        }

        class ResponseWrapper<T> {
            - responseCode: int
            - message: String
            - data: T
        }
    

   
        class User {
            - userId: long
            - name: String
            - phoneNumber: String
            - password: String
            - profilePicture: byte[]
            - isActive: boolean
            - isLocked: boolean
            - createdDate: LocalDateTime
            - tokenVersion: long
            + addUserRole(userRole: UserRole): void
            + removeUserRole(userRole: UserRole): void
            + addFcmToken(fcmToken: FCMToken): void
            + removeFcmToken(fcmToken: FCMToken): void
        }
    

        class JwtService {
            + generateToken(user: User): String
            + validateToken(token: String): boolean
            + extractAllClaims(token: String): Claims
            + getSignInKey(): Key
        }
    

    ResetPasswordView --> ResetPasswordController
    ResetPasswordController --> UserController
    UserController --> UserService
    UserService --> UserRepository
    UserService --> JwtService
    UserController --> PasswordChangeRequestDto
    UserController --> UserProfileResponseDto
    UserController --> ResponseWrapper
    UserService --> User
    UserRepository --> User
    JwtService --> User

}

@enduml