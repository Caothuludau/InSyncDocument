@startuml SendNotificationToDriver
skinparam classAttributeIconSize 0
skinparam linetype ortho

skinparam BackgroundColor #ffffff
skinparam class {
    BackgroundColor #c6f8ff
    BorderColor #000000
}

skinparam package {
    BackgroundColor #ffffff
    BorderColor #000000
}

package pkgSendNotificationToDriver <<Frame>>{

        class JourneyView {
            + createJourney(): void
            + deleteJourney(): void
        }

        class JourneyController {
            - journeyId: int
            + submitJourneyDetails(): void
            + deleteJourney(): void
        }

        class JourneyController {
            + createJourney(journeyRequestDto: JourneyRequestDto): ResponseEntity<ResponseWrapper<JourneyResponseDto>>
            + deleteJourney(journeyId: Long): ResponseEntity<ResponseWrapper<String>>
        }
 
        class JourneyService {
            + createJourney(journeyRequestDto: JourneyRequestDto): Journey
            + deleteJourney(journeyId: Long): void
            + checkForMatchingDrivers(journey: Journey): List<Driver>
        }

        class JourneyRepository {
            + save(journey: Journey): Journey
            + deleteById(journeyId: Long): void
        }

        class NotificationService {
            + sendNotificationToDriver(notificationRequestDto: NotificationRequestDto): void
        }

        class NotificationRepository {
            + save(notification: Notification): Notification
        }
  
        class JourneyRequestDto {
            - userId: Long
            - startLocation: String
            - endLocation: String
            - departureTime: LocalDateTime
            - vehicleType: String
            - specialNotes: String
        }

        class JourneyResponseDto {
            - journeyId: Long
            - startLocation: String
            - endLocation: String
            - departureTime: LocalDateTime
            - vehicleType: String
            - specialNotes: String
        }

        class NotificationRequestDto {
            - driverId: Long
            - message: String
        }

        class ResponseWrapper<T> {
            - responseCode: int
            - message: String
            - data: T
        }
 
        class Journey {
            - journeyId: long
            - user: User
            - startLocation: String
            - endLocation: String
            - departureTime: LocalDateTime
            - vehicleType: String
            - specialNotes: String
        }

        class Notification {
            - notificationId: long
            - driver: Driver
            - message: String
            - timestamp: LocalDateTime
        }

        class User {
            - userId: long
            - name: String
            - phoneNumber: String
            - password: String
            - profilePicture: byte[]
            - isActive: boolean
            - isLocked: boolean
            - createdDate: LocalDateTime
            - tokenVersion: long
        }

        class Driver {
            - driverId: long
            - name: String
            - phoneNumber: String
            - vehicleType: String
            - licensePlate: String
        }
    }

    JourneyView --> JourneyController
    JourneyController --> JourneyController
    JourneyController --> JourneyService
    JourneyService --> JourneyRepository
    JourneyService --> NotificationService
    NotificationService --> NotificationRepository
    JourneyService --> JourneyRequestDto
    JourneyService --> JourneyResponseDto
    JourneyController --> ResponseWrapper
    JourneyService --> Journey
    JourneyRepository --> Journey
    NotificationService --> NotificationRequestDto
    NotificationRepository --> Notification
    Journey --> User
    Notification --> Driver

}

@enduml